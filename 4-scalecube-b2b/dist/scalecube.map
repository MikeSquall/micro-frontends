{"version":3,"sources":["../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/Message.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/DispatcherContext.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/Microservices.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/ServiceInstance.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/ProxyContext.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/RoundRobinRouter.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/Router.js","../../src/util/root.ts","../../src/util/isFunction.ts","../../src/util/isArray.ts","../../src/util/isObject.ts","../../src/util/errorObject.ts","../../src/util/tryCatch.ts","../../src/util/UnsubscriptionError.ts","../src/Subscription.ts","../src/Observer.ts","../../src/symbol/rxSubscriber.ts","../src/Subscriber.ts","../../src/util/toSubscriber.ts","../../src/symbol/observable.ts","../../src/util/noop.ts","../../src/util/pipe.ts","../src/Observable.ts","../src/OuterSubscriber.ts","../../src/util/isArrayLike.ts","../../src/util/isPromise.ts","../../src/symbol/iterator.ts","../src/InnerSubscriber.ts","../../src/util/subscribeToResult.ts","../../src/operators/catchError.ts","../../src/operator/catch.ts","../../../src/add/operator/catch.ts","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/ServiceCall.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/ServicesConfig.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/ServiceDefinition.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/ServiceRegistery.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/ServicePromise.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/utils.js","../node_modules/@scalecube/scalecube-js/lib/scalecube-services/services/index.js","scalecube.js"],"names":["mc","Microservices","builder","window"],"mappings":"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","file":"scalecube.map","sourceRoot":"../scalecube","sourcesContent":["\"use strict\";","'use strict';\n\nexports.__esModule = true;\nexports.DispatcherContext = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ = require('./');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DispatcherContext = function () {\n  function DispatcherContext(microservices) {\n    var router = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.RoundRobinServiceRouter;\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5000;\n\n    _classCallCheck(this, DispatcherContext);\n\n    this.microservices = microservices;\n    this.myrouter = router;\n    this.timeout = timeout;\n  }\n\n  _createClass(DispatcherContext, [{\n    key: 'router',\n    value: function router(_router) {\n      this.myrouter = _router;\n      return this;\n    }\n  }, {\n    key: 'create',\n    value: function create() {\n      return new _.ServiceCall(new this.myrouter(this.microservices.serviceRegistery), this.timeout);\n    }\n  }]);\n\n  return DispatcherContext;\n}();\n\nexports.DispatcherContext = DispatcherContext;","'use strict';\n\nexports.__esModule = true;\nexports.Microservices = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ = require('./');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Builder = function () {\n  function Builder() {\n    _classCallCheck(this, Builder);\n\n    this.servicesConfig = new _.ServicesConfig([]);\n  }\n\n  _createClass(Builder, [{\n    key: 'services',\n    value: function services() {\n      for (var _len = arguments.length, _services = Array(_len), _key = 0; _key < _len; _key++) {\n        _services[_key] = arguments[_key];\n      }\n\n      this.servicesConfig = _.ServicesConfig.builder(this).services(_services).create();\n      return this;\n    }\n  }, {\n    key: 'serviceLoaders',\n    value: function serviceLoaders() {\n      var _this = this;\n\n      for (var _len2 = arguments.length, services = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        services[_key2] = arguments[_key2];\n      }\n\n      services.map(function (s) {\n        return _this.services(_.utils.makeLoader(s.loader(), s.serviceClass));\n      });\n      return this;\n    }\n  }, {\n    key: 'build',\n    value: function build() {\n      return new Microservices(this.servicesConfig);\n    }\n  }]);\n\n  return Builder;\n}();\n\nvar Microservices = exports.Microservices = function () {\n  function Microservices(serviceConfig) {\n    _classCallCheck(this, Microservices);\n\n    this.serviceRegistery = new _.ServiceRegistery(serviceConfig);\n    return this;\n  }\n\n  _createClass(Microservices, [{\n    key: 'proxy',\n    value: function proxy() {\n      return new _.ProxyContext(this);\n    }\n  }, {\n    key: 'dispatcher',\n    value: function dispatcher() {\n      return new _.DispatcherContext(this);\n    }\n  }], [{\n    key: 'builder',\n    value: function builder() {\n      return new Builder();\n    }\n  }]);\n\n  return Microservices;\n}();\n\n// Microservices.Builder = new Builder();","\"use strict\";","'use strict';\n\nexports.__esModule = true;\nexports.ProxyContext = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ = require('./');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ProxyContext = function () {\n  function ProxyContext(microservices) {\n    _classCallCheck(this, ProxyContext);\n\n    this.microservices = microservices;\n    this.router = _.RoundRobinServiceRouter;\n  }\n\n  _createClass(ProxyContext, [{\n    key: 'createProxy',\n    value: function createProxy(api, router) {\n      var dispatcher = this.microservices.dispatcher().router(router).create();\n      var obj = Object.create(api);\n      Object.getOwnPropertyNames(obj.prototype).map(function (prop) {\n        if (prop !== 'constructor') {\n          delete obj[prop];\n        } else {\n          obj[prop] = function () {};\n        }\n      });\n      Object.keys(api.meta.methods).map(function (m) {\n        obj[m] = function () {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          var message = {\n            serviceName: api.name,\n            method: m,\n            data: args\n          };\n          if (api.meta.methods[m].type === 'Promise') {\n            return dispatcher.invoke(message);\n          } else if (api.meta.methods[m].type === 'Observable') {\n            return dispatcher.listen(message);\n          } else {\n            return new Error('service method unknown type error: ' + api.name + '.' + m);\n          }\n        };\n      });\n      return obj;\n    }\n  }, {\n    key: 'create',\n    value: function create() {\n      return this.createProxy(this.myapi, this.router);\n    }\n  }, {\n    key: 'api',\n    value: function api(_api) {\n      this.myapi = _api;\n      return this;\n    }\n  }]);\n\n  return ProxyContext;\n}();\n\nexports.ProxyContext = ProxyContext;","\"use strict\";\n\nexports.__esModule = true;\nexports.RoundRobinServiceRouter = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ = require(\"./\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RoundRobinServiceRouter = exports.RoundRobinServiceRouter = function () {\n  function RoundRobinServiceRouter(registry) {\n    _classCallCheck(this, RoundRobinServiceRouter);\n\n    this.registry = registry;\n    this.counter = new Map();\n  }\n\n  _createClass(RoundRobinServiceRouter, [{\n    key: \"route\",\n    value: function route(request) {\n      var instances = this.registry.serviceLookup(request.serviceName).filter(function (inst) {\n        return inst.serviceDefinition.methods[request.method] !== \"undefined\";\n      });\n\n      if (instances.length > 1) {\n        var index = ((this.counter.get(request.serviceName) || 0) + 1) % instances.length;\n        this.counter.set(request.serviceName, index);\n        return instances[index];\n      } else if (instances.length === 1) {\n        return instances[0];\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return RoundRobinServiceRouter;\n}();","'use strict';\n\nvar _ = require('./');","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated internal use only */ _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  /** @deprecated internal use only */ public source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","'use strict';\n\nexports.__esModule = true;\nexports.ServiceCall = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ = require('./');\n\nvar _Observable = require('rxjs/Observable');\n\nrequire('rxjs/add/operator/catch');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n// $FlowFixMe\n\n\nvar isObservable = function isObservable(obj) {\n  if (obj.constructor.name === 'Observable') {\n    return true;\n  }\n  return false;\n};\nvar createServiceObserver = function createServiceObserver(message, service, observer) {\n  var obs = service[message.method].apply(service, _toConsumableArray(message.data));\n  if (isObservable(obs)) {\n    var sub = obs.subscribe(function (val) {\n      return observer.next(val);\n    }, function (error) {\n      return observer.error(error);\n    });\n    return function () {\n      return sub.unsubscribe();\n    };\n  } else {\n    observer.error(new Error('Service method not observable error: ' + message.serviceName + '.' + message.method));\n    return function () {};\n  }\n};\n\nvar ServiceCall = exports.ServiceCall = function () {\n  function ServiceCall(router) {\n    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;\n\n    _classCallCheck(this, ServiceCall);\n\n    this.router = router;\n  }\n\n  _createClass(ServiceCall, [{\n    key: 'invoke',\n    value: function invoke(message) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!Array.isArray(message.data)) {\n          return reject(new Error('Message format error: data must be Array'));\n        }\n\n        var inst = _this.router.route(message);\n\n        if (inst && inst.service && _.utils.isLoader(inst)) {\n          return inst.service.promise.then(function (myservice) {\n            return resolve(myservice[message.method].apply(myservice, _toConsumableArray(message.data)));\n          });\n        } else if (inst) {\n          var _inst$service;\n\n          return resolve((_inst$service = inst.service)[message.method].apply(_inst$service, _toConsumableArray(message.data)));\n        }\n        reject(new Error('Service not found error: ' + message.serviceName + '.' + message.method));\n      });\n    }\n  }, {\n    key: 'listen',\n    value: function listen(message) {\n      var _this2 = this;\n\n      return _Observable.Observable.create(function (observer) {\n        if (!Array.isArray(message.data)) {\n          observer.error(new Error('Message format error: data must be Array'));\n        }\n        var inst = _this2.router.route(message);\n        if (!inst) {\n          observer.error(new Error('Service not found error: ' + message.serviceName + '.' + message.method));\n        } else if (_.utils.isLoader(inst)) {\n          var unsubscribe = void 0;\n          var promise = new Promise(function (resolve) {\n            inst.service.promise.then(function (service) {\n              resolve(createServiceObserver(message, service, observer));\n            }).catch(function (e) {\n              return observer.error(e);\n            });\n          });\n          return function () {\n            promise.then(function (unsubscribe) {\n              return unsubscribe();\n            });\n          };\n        } else {\n          return createServiceObserver(message, inst.service, observer);\n        }\n      });\n    }\n  }]);\n\n  return ServiceCall;\n}();","'use strict';\n\nexports.__esModule = true;\nexports.ServicesConfig = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ = require('./');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Builder = function () {\n  function Builder(builder) {\n    _classCallCheck(this, Builder);\n\n    // $FlowFixMe\n    this.servicesBuilder = [].concat(_toConsumableArray(builder.servicesConfig.servicesConfig));\n    this.microservicesBuilder = builder;\n  }\n\n  _createClass(Builder, [{\n    key: 'builder',\n    value: function builder(_builder) {\n      this.microservicesBuilder = _builder;\n    }\n  }, {\n    key: 'build',\n    value: function build() {\n      // TODO return Microservices.Builder\n      return this.microservicesBuilder.services(new ServicesConfig(this.servicesBuilder));\n    }\n  }, {\n    key: 'services',\n    value: function services() {\n      var _this = this;\n\n      for (var _len = arguments.length, _services = Array(_len), _key = 0; _key < _len; _key++) {\n        _services[_key] = arguments[_key];\n      }\n\n      _services[0].map(function (o) {\n        if (typeof o === 'function') {\n          console.error(new Error(o.name + ' is a class not instance'));\n        }\n        _this.add(new ServicesConfig(o));\n      });\n      return this;\n    }\n  }, {\n    key: 'add',\n    value: function add(serviceBuilder) {\n      this.servicesBuilder.push(serviceBuilder);\n      return this;\n    }\n  }, {\n    key: 'create',\n    value: function create() {\n      return new ServicesConfig(this.servicesBuilder);\n    }\n  }]);\n\n  return Builder;\n}();\n//extends ServicesConfigApi\n\n\nvar ServicesConfig = function () {\n\n  // public ServiceConfig(Object service) {\n  // public ServiceConfig(Builder builder, Object service) {\n\n  // static Builder = Builder; // getter can't be validate by flow; const not supported; if you hack it, it's your problem\n  function ServicesConfig(service, builder) {\n    _classCallCheck(this, ServicesConfig);\n\n    if (service && Array.isArray(service)) {\n      this.servicesConfig = service;\n      return this;\n    }\n    if (builder && builder.constructor && builder.constructor.name !== 'Builder') {\n      this.mcBuilder = builder;\n    }\n    this.service = service;\n    this.serviceDefinition = _.ServiceDefinition.from(service);\n    return this;\n  }\n\n  _createClass(ServicesConfig, null, [{\n    key: 'builder',\n    value: function builder(_builder2) {\n      // TODO change it when splitting to files\n      return new Builder(_builder2);\n    }\n  }]);\n\n  return ServicesConfig;\n}();\n\n// ServicesConfig.Builder = new Builder();\n\n\nexports.ServicesConfig = ServicesConfig;","'use strict';\n\nexports.__esModule = true;\nexports.ServiceDefinition = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ = require('./');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ServiceDefinition = exports.ServiceDefinition = function () {\n  /**\r\n   * Constructor of service definition instance.\r\n   *\r\n   * @param serviceInterface the class of the service interface.\r\n   * @param serviceName - the qualifier of the service.\r\n   * @param methods - the methods to invoke the service.\r\n   */\n  function ServiceDefinition(serviceInterface, serviceName, methods) {\n    _classCallCheck(this, ServiceDefinition);\n\n    this.serviceInterface = _.utils.getServiceInterface(serviceInterface);\n    this.serviceName = serviceName; // TODO check what to do with it if module\n    this.methods = methods;\n  }\n\n  _createClass(ServiceDefinition, null, [{\n    key: 'getMethod',\n    value: function getMethod(meta, service, key) {\n      if (meta.type === 'Promise') {\n        return service;\n      } else {\n        return service[key];\n      }\n    }\n  }, {\n    key: 'from',\n    value: function from(service) {\n      var methods = {};\n\n      var meta = service.constructor.meta || service.meta;\n      Object.keys(meta.methods).map(function (key) {\n        methods[key] = ServiceDefinition.getMethod(meta, service, key);\n      });\n      return new ServiceDefinition(service, _.utils.getServiceName(service), methods);\n    }\n  }]);\n\n  return ServiceDefinition;\n}();","'use strict';\n\nexports.__esModule = true;\nexports.ServiceRegistery = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ = require('./');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ServiceRegistery = exports.ServiceRegistery = function () {\n  function ServiceRegistery(serviceConfig) {\n    var _this = this;\n\n    _classCallCheck(this, ServiceRegistery);\n\n    this.services = this.services || {};\n    serviceConfig.servicesConfig.map(function (sc) {\n      _this.register(sc);\n    });\n    return this;\n  }\n\n  _createClass(ServiceRegistery, [{\n    key: 'serviceLookup',\n    value: function serviceLookup(name) {\n      return this.services[name] || [];\n    }\n  }, {\n    key: 'register',\n    value: function register(serviceConfig) {\n      if (this.services[serviceConfig.serviceDefinition.serviceName]) {\n        this.services[serviceConfig.serviceDefinition.serviceName].push(serviceConfig);\n      } else {\n        this.services[serviceConfig.serviceDefinition.serviceName] = [serviceConfig];\n      }\n    }\n  }]);\n\n  return ServiceRegistery;\n}();","'use strict';\n\nexports.__esModule = true;\nexports.ServicePromise = undefined;\n\nvar _ = require('./');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ServicePromise = exports.ServicePromise = function (_Promise) {\n  _inherits(ServicePromise, _Promise);\n\n  function ServicePromise() {\n    _classCallCheck(this, ServicePromise);\n\n    return _possibleConstructorReturn(this, (ServicePromise.__proto__ || Object.getPrototypeOf(ServicePromise)).apply(this, arguments));\n  }\n\n  return ServicePromise;\n}(Promise);","'use strict';\n\nexports.__esModule = true;\nvar getServiceInterface = exports.getServiceInterface = function getServiceInterface(o) {\n  // we`ll have to think about this one... right new just a name\n  return o.constructor.name;\n};\nvar getServiceName = exports.getServiceName = function getServiceName(o) {\n  return o.meta && o.meta.serviceName || o.constructor.meta && o.constructor.meta.serviceName || o.constructor.name;\n};\nvar isLoader = exports.isLoader = function isLoader(inst) {\n  return inst && inst.service && inst.service.meta && inst.service.meta.type === 'Loader';\n};\nvar makeLoader = exports.makeLoader = function makeLoader(loadFunction, Class) {\n  return {\n    promise: loadFunction,\n    meta: Object.assign(Class.meta, {\n      type: 'Loader',\n      serviceName: Class.meta && Class.meta.serviceName || Class.name\n    })\n  };\n};","'use strict';\n\nexports.__esModule = true;\nexports.utils = exports.ServicePromise = exports.ServiceRegistery = exports.ServiceDefinition = exports.ServicesConfig = exports.ServiceCall = exports.Router = exports.RoundRobinServiceRouter = exports.ProxyContext = exports.ServiceInstance = exports.Microservices = exports.DispatcherContext = exports.Message = undefined;\n\nvar _Message = require('./Message');\n\nvar _DispatcherContext = require('./DispatcherContext');\n\nvar _Microservices = require('./Microservices');\n\nvar _ServiceInstance = require('./ServiceInstance');\n\nvar _ProxyContext = require('./ProxyContext');\n\nvar _RoundRobinRouter = require('./RoundRobinRouter');\n\nvar _Router = require('./Router');\n\nvar _ServiceCall = require('./ServiceCall');\n\nvar _ServicesConfig = require('./ServicesConfig');\n\nvar _ServiceDefinition = require('./ServiceDefinition');\n\nvar _ServiceRegistery = require('./ServiceRegistery');\n\nvar _ServicePromise = require('./ServicePromise');\n\nvar _utils = require('./utils');\n\nvar utils = _interopRequireWildcard(_utils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nexports.Message = _Message.Message;\nexports.DispatcherContext = _DispatcherContext.DispatcherContext;\nexports.Microservices = _Microservices.Microservices;\nexports.ServiceInstance = _ServiceInstance.ServiceInstance;\nexports.ProxyContext = _ProxyContext.ProxyContext;\nexports.RoundRobinServiceRouter = _RoundRobinRouter.RoundRobinServiceRouter;\nexports.Router = _Router.Router;\nexports.ServiceCall = _ServiceCall.ServiceCall;\nexports.ServicesConfig = _ServicesConfig.ServicesConfig;\nexports.ServiceDefinition = _ServiceDefinition.ServiceDefinition;\nexports.ServiceRegistery = _ServiceRegistery.ServiceRegistery;\nexports.ServicePromise = _ServicePromise.ServicePromise;\nexports.utils = utils;","import { Microservices } from '@scalecube/scalecube-js';\n\nconst mc = Microservices.builder();\n\nwindow['scalecube'] = {\n    Microservices: {\n        builder: () => mc\n    }\n};\n"]}