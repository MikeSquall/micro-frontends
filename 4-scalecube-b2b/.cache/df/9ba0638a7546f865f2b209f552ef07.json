{"id":"DRWY","dependencies":[{"name":"/home/idan/prj/playground/micro-frontends/node_modules/rxjs/Observable.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/idan/prj/playground/micro-frontends/package.json","includedInParent":true,"mtime":1538321389029},{"name":"/home/idan/prj/playground/micro-frontends/node_modules/rxjs/package.json","includedInParent":true,"mtime":499162500000},{"name":"./util/root","loc":{"line":2,"column":21},"parent":"/home/idan/prj/playground/micro-frontends/node_modules/rxjs/Observable.js","resolved":"/home/idan/prj/playground/micro-frontends/node_modules/rxjs/util/root.js"},{"name":"./util/toSubscriber","loc":{"line":3,"column":29},"parent":"/home/idan/prj/playground/micro-frontends/node_modules/rxjs/Observable.js","resolved":"/home/idan/prj/playground/micro-frontends/node_modules/rxjs/util/toSubscriber.js"},{"name":"./symbol/observable","loc":{"line":4,"column":27},"parent":"/home/idan/prj/playground/micro-frontends/node_modules/rxjs/Observable.js","resolved":"/home/idan/prj/playground/micro-frontends/node_modules/rxjs/symbol/observable.js"},{"name":"./util/pipe","loc":{"line":5,"column":21},"parent":"/home/idan/prj/playground/micro-frontends/node_modules/rxjs/Observable.js","resolved":"/home/idan/prj/playground/micro-frontends/node_modules/rxjs/util/pipe.js"}],"generated":{"js":"\"use strict\";var r=require(\"./util/root\"),o=require(\"./util/toSubscriber\"),t=require(\"./symbol/observable\"),e=require(\"./util/pipe\"),i=function(){function i(r){this._isScalar=!1,r&&(this._subscribe=r)}return i.prototype.lift=function(r){var o=new i;return o.source=this,o.operator=r,o},i.prototype.subscribe=function(r,t,e){var i=this.operator,n=o.toSubscriber(r,t,e);if(i?i.call(n,this.source):n.add(this.source||!n.syncErrorThrowable?this._subscribe(n):this._trySubscribe(n)),n.syncErrorThrowable&&(n.syncErrorThrowable=!1,n.syncErrorThrown))throw n.syncErrorValue;return n},i.prototype._trySubscribe=function(r){try{return this._subscribe(r)}catch(o){r.syncErrorThrown=!0,r.syncErrorValue=o,r.error(o)}},i.prototype.forEach=function(o,t){var e=this;if(t||(r.root.Rx&&r.root.Rx.config&&r.root.Rx.config.Promise?t=r.root.Rx.config.Promise:r.root.Promise&&(t=r.root.Promise)),!t)throw new Error(\"no Promise impl found\");return new t(function(r,t){var i;i=e.subscribe(function(r){if(i)try{o(r)}catch(r){t(r),i.unsubscribe()}else o(r)},t,r)})},i.prototype._subscribe=function(r){return this.source.subscribe(r)},i.prototype[t.observable]=function(){return this},i.prototype.pipe=function(){for(var r=[],o=0;o<arguments.length;o++)r[o-0]=arguments[o];return 0===r.length?this:e.pipeFromArray(r)(this)},i.prototype.toPromise=function(o){var t=this;if(o||(r.root.Rx&&r.root.Rx.config&&r.root.Rx.config.Promise?o=r.root.Rx.config.Promise:r.root.Promise&&(o=r.root.Promise)),!o)throw new Error(\"no Promise impl found\");return new o(function(r,o){var e;t.subscribe(function(r){return e=r},function(r){return o(r)},function(){return r(e)})})},i.create=function(r){return new i(r)},i}();exports.Observable=i;","map":{"mappings":[{"source":"../src/Observable.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":13}},{"source":"../src/Observable.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":17}},{"source":"../src/Observable.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":19}},{"source":"../src/Observable.ts","name":null,"original":{"line":5,"column":21},"generated":{"line":1,"column":27}},{"source":"../src/Observable.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":42}},{"source":"../src/Observable.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":44}},{"source":"../src/Observable.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":1,"column":52}},{"source":"../src/Observable.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":1,"column":75}},{"source":"../src/Observable.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":1,"column":77}},{"source":"../src/Observable.ts","name":null,"original":{"line":9,"column":48},"generated":{"line":1,"column":85}},{"source":"../src/Observable.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":108}},{"source":"../src/Observable.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":110}},{"source":"../src/Observable.ts","name":null,"original":{"line":11,"column":30},"generated":{"line":1,"column":118}},{"source":"../src/Observable.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":1,"column":133}},{"source":"../src/Observable.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":1,"column":135}},{"source":"../src/Observable.ts","name":null,"original":{"line":42,"column":2},"generated":{"line":1,"column":146}},{"source":"../src/Observable.ts","name":null,"original":{"line":42,"column":2},"generated":{"line":1,"column":155}},{"source":"../src/Observable.ts","name":null,"original":{"line":42,"column":14},"generated":{"line":1,"column":157}},{"source":"../src/Observable.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":1,"column":160}},{"source":"../src/Observable.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":1,"column":165}},{"source":"../src/Observable.ts","name":null,"original":{"line":30,"column":30},"generated":{"line":1,"column":176}},{"source":"../src/Observable.ts","name":null,"original":{"line":43,"column":8},"generated":{"line":1,"column":178}},{"source":"../src/Observable.ts","name":null,"original":{"line":44,"column":6},"generated":{"line":1,"column":182}},{"source":"../src/Observable.ts","name":null,"original":{"line":44,"column":11},"generated":{"line":1,"column":187}},{"source":"../src/Observable.ts","name":null,"original":{"line":44,"column":24},"generated":{"line":1,"column":198}},{"source":"../src/Observable.ts","name":null,"original":{"line":355,"column":0},"generated":{"line":1,"column":201}},{"source":"../src/Observable.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":1,"column":208}},{"source":"../src/Observable.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":1,"column":210}},{"source":"../src/Observable.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":1,"column":220}},{"source":"../src/Observable.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":1,"column":225}},{"source":"../src/Observable.ts","name":null,"original":{"line":69,"column":10},"generated":{"line":1,"column":234}},{"source":"../src/Observable.ts","name":null,"original":{"line":70,"column":4},"generated":{"line":1,"column":237}},{"source":"../src/Observable.ts","name":null,"original":{"line":70,"column":10},"generated":{"line":1,"column":241}},{"source":"../src/Observable.ts","name":null,"original":{"line":70,"column":23},"generated":{"line":1,"column":243}},{"source":"../src/Observable.ts","name":null,"original":{"line":70,"column":27},"generated":{"line":1,"column":247}},{"source":"../src/Observable.ts","name":null,"original":{"line":73,"column":4},"generated":{"line":1,"column":249}},{"source":"../src/Observable.ts","name":null,"original":{"line":71,"column":4},"generated":{"line":1,"column":256}},{"source":"../src/Observable.ts","name":null,"original":{"line":71,"column":15},"generated":{"line":1,"column":258}},{"source":"../src/Observable.ts","name":null,"original":{"line":71,"column":24},"generated":{"line":1,"column":265}},{"source":"../src/Observable.ts","name":null,"original":{"line":72,"column":4},"generated":{"line":1,"column":270}},{"source":"../src/Observable.ts","name":null,"original":{"line":72,"column":15},"generated":{"line":1,"column":272}},{"source":"../src/Observable.ts","name":null,"original":{"line":72,"column":26},"generated":{"line":1,"column":281}},{"source":"../src/Observable.ts","name":null,"original":{"line":73,"column":11},"generated":{"line":1,"column":283}},{"source":"../src/Observable.ts","name":null,"original":{"line":192,"column":2},"generated":{"line":1,"column":286}},{"source":"../src/Observable.ts","name":null,"original":{"line":192,"column":2},"generated":{"line":1,"column":288}},{"source":"../src/Observable.ts","name":null,"original":{"line":192,"column":2},"generated":{"line":1,"column":298}},{"source":"../src/Observable.ts","name":null,"original":{"line":192,"column":2},"generated":{"line":1,"column":308}},{"source":"../src/Observable.ts","name":null,"original":{"line":192,"column":12},"generated":{"line":1,"column":317}},{"source":"../src/Observable.ts","name":null,"original":{"line":193,"column":12},"generated":{"line":1,"column":319}},{"source":"../src/Observable.ts","name":null,"original":{"line":194,"column":12},"generated":{"line":1,"column":321}},{"source":"../src/Observable.ts","name":null,"original":{"line":196,"column":12},"generated":{"line":1,"column":324}},{"source":"../src/Observable.ts","name":null,"original":{"line":196,"column":12},"generated":{"line":1,"column":328}},{"source":"../src/Observable.ts","name":null,"original":{"line":196,"column":12},"generated":{"line":1,"column":330}},{"source":"../src/Observable.ts","name":null,"original":{"line":196,"column":12},"generated":{"line":1,"column":335}},{"source":"../src/Observable.ts","name":null,"original":{"line":197,"column":10},"generated":{"line":1,"column":344}},{"source":"../src/Observable.ts","name":null,"original":{"line":197,"column":17},"generated":{"line":1,"column":346}},{"source":"../src/Observable.ts","name":null,"original":{"line":197,"column":17},"generated":{"line":1,"column":348}},{"source":"../src/Observable.ts","name":null,"original":{"line":197,"column":30},"generated":{"line":1,"column":361}},{"source":"../src/Observable.ts","name":null,"original":{"line":197,"column":46},"generated":{"line":1,"column":363}},{"source":"../src/Observable.ts","name":null,"original":{"line":197,"column":53},"generated":{"line":1,"column":365}},{"source":"../src/Observable.ts","name":null,"original":{"line":205,"column":4},"generated":{"line":1,"column":368}},{"source":"../src/Observable.ts","name":null,"original":{"line":199,"column":8},"generated":{"line":1,"column":371}},{"source":"../src/Observable.ts","name":null,"original":{"line":200,"column":6},"generated":{"line":1,"column":373}},{"source":"../src/Observable.ts","name":null,"original":{"line":200,"column":15},"generated":{"line":1,"column":375}},{"source":"../src/Observable.ts","name":null,"original":{"line":200,"column":20},"generated":{"line":1,"column":380}},{"source":"../src/Observable.ts","name":null,"original":{"line":200,"column":26},"generated":{"line":1,"column":382}},{"source":"../src/Observable.ts","name":null,"original":{"line":200,"column":31},"generated":{"line":1,"column":387}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":6},"generated":{"line":1,"column":395}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":11},"generated":{"line":1,"column":397}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":15},"generated":{"line":1,"column":401}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":20},"generated":{"line":1,"column":406}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":31},"generated":{"line":1,"column":415}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":36},"generated":{"line":1,"column":417}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":57},"generated":{"line":1,"column":436}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":62},"generated":{"line":1,"column":441}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":73},"generated":{"line":1,"column":452}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":81},"generated":{"line":1,"column":455}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":86},"generated":{"line":1,"column":460}},{"source":"../src/Observable.ts","name":null,"original":{"line":202,"column":100},"generated":{"line":1,"column":474}},{"source":"../src/Observable.ts","name":null,"original":{"line":205,"column":8},"generated":{"line":1,"column":478}},{"source":"../src/Observable.ts","name":null,"original":{"line":205,"column":13},"generated":{"line":1,"column":480}},{"source":"../src/Observable.ts","name":null,"original":{"line":206,"column":6},"generated":{"line":1,"column":501}},{"source":"../src/Observable.ts","name":null,"original":{"line":206,"column":11},"generated":{"line":1,"column":503}},{"source":"../src/Observable.ts","name":null,"original":{"line":206,"column":32},"generated":{"line":1,"column":523}},{"source":"../src/Observable.ts","name":null,"original":{"line":207,"column":10},"generated":{"line":1,"column":525}},{"source":"../src/Observable.ts","name":null,"original":{"line":207,"column":15},"generated":{"line":1,"column":527}},{"source":"../src/Observable.ts","name":null,"original":{"line":208,"column":8},"generated":{"line":1,"column":544}},{"source":"../src/Observable.ts","name":null,"original":{"line":208,"column":14},"generated":{"line":1,"column":550}},{"source":"../src/Observable.ts","name":null,"original":{"line":208,"column":19},"generated":{"line":1,"column":552}},{"source":"../src/Observable.ts","name":null,"original":{"line":212,"column":4},"generated":{"line":1,"column":567}},{"source":"../src/Observable.ts","name":null,"original":{"line":212,"column":11},"generated":{"line":1,"column":574}},{"source":"../src/Observable.ts","name":null,"original":{"line":215,"column":12},"generated":{"line":1,"column":577}},{"source":"../src/Observable.ts","name":null,"original":{"line":215,"column":12},"generated":{"line":1,"column":579}},{"source":"../src/Observable.ts","name":null,"original":{"line":215,"column":12},"generated":{"line":1,"column":589}},{"source":"../src/Observable.ts","name":null,"original":{"line":215,"column":2},"generated":{"line":1,"column":603}},{"source":"../src/Observable.ts","name":null,"original":{"line":215,"column":26},"generated":{"line":1,"column":612}},{"source":"../src/Observable.ts","name":null,"original":{"line":216,"column":4},"generated":{"line":1,"column":615}},{"source":"../src/Observable.ts","name":null,"original":{"line":217,"column":6},"generated":{"line":1,"column":619}},{"source":"../src/Observable.ts","name":null,"original":{"line":217,"column":13},"generated":{"line":1,"column":626}},{"source":"../src/Observable.ts","name":null,"original":{"line":217,"column":18},"generated":{"line":1,"column":631}},{"source":"../src/Observable.ts","name":null,"original":{"line":217,"column":29},"generated":{"line":1,"column":642}},{"source":"../src/Observable.ts","name":null,"original":{"line":218,"column":6},"generated":{"line":1,"column":645}},{"source":"../src/Observable.ts","name":null,"original":{"line":218,"column":13},"generated":{"line":1,"column":651}},{"source":"../src/Observable.ts","name":null,"original":{"line":219,"column":6},"generated":{"line":1,"column":654}},{"source":"../src/Observable.ts","name":null,"original":{"line":219,"column":11},"generated":{"line":1,"column":656}},{"source":"../src/Observable.ts","name":null,"original":{"line":219,"column":29},"generated":{"line":1,"column":673}},{"source":"../src/Observable.ts","name":null,"original":{"line":220,"column":6},"generated":{"line":1,"column":675}},{"source":"../src/Observable.ts","name":null,"original":{"line":220,"column":11},"generated":{"line":1,"column":677}},{"source":"../src/Observable.ts","name":null,"original":{"line":220,"column":28},"generated":{"line":1,"column":692}},{"source":"../src/Observable.ts","name":null,"original":{"line":221,"column":6},"generated":{"line":1,"column":694}},{"source":"../src/Observable.ts","name":null,"original":{"line":221,"column":11},"generated":{"line":1,"column":696}},{"source":"../src/Observable.ts","name":null,"original":{"line":221,"column":17},"generated":{"line":1,"column":702}},{"source":"../src/Observable.ts","name":null,"original":{"line":232,"column":2},"generated":{"line":1,"column":707}},{"source":"../src/Observable.ts","name":null,"original":{"line":232,"column":2},"generated":{"line":1,"column":709}},{"source":"../src/Observable.ts","name":null,"original":{"line":232,"column":2},"generated":{"line":1,"column":719}},{"source":"../src/Observable.ts","name":null,"original":{"line":232,"column":2},"generated":{"line":1,"column":727}},{"source":"../src/Observable.ts","name":null,"original":{"line":232,"column":10},"generated":{"line":1,"column":736}},{"source":"../src/Observable.ts","name":null,"original":{"line":232,"column":36},"generated":{"line":1,"column":738}},{"source":"../src/Observable.ts","name":null,"original":{"line":232,"column":2},"generated":{"line":1,"column":741}},{"source":"../src/Observable.ts","name":null,"original":{"line":232,"column":2},"generated":{"line":1,"column":745}},{"source":"../src/Observable.ts","name":null,"original":{"line":232,"column":2},"generated":{"line":1,"column":747}},{"source":"../src/Observable.ts","name":null,"original":{"line":241,"column":4},"generated":{"line":1,"column":752}},{"source":"../src/Observable.ts","name":null,"original":{"line":233,"column":9},"generated":{"line":1,"column":755}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":10},"generated":{"line":1,"column":759}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":10},"generated":{"line":1,"column":761}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":15},"generated":{"line":1,"column":766}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":21},"generated":{"line":1,"column":770}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":21},"generated":{"line":1,"column":772}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":26},"generated":{"line":1,"column":777}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":29},"generated":{"line":1,"column":780}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":39},"generated":{"line":1,"column":788}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":39},"generated":{"line":1,"column":790}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":44},"generated":{"line":1,"column":795}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":47},"generated":{"line":1,"column":798}},{"source":"../src/Observable.ts","name":null,"original":{"line":234,"column":54},"generated":{"line":1,"column":805}},{"source":"../src/Observable.ts","name":null,"original":{"line":235,"column":8},"generated":{"line":1,"column":813}},{"source":"../src/Observable.ts","name":null,"original":{"line":235,"column":22},"generated":{"line":1,"column":815}},{"source":"../src/Observable.ts","name":null,"original":{"line":235,"column":22},"generated":{"line":1,"column":817}},{"source":"../src/Observable.ts","name":null,"original":{"line":235,"column":27},"generated":{"line":1,"column":822}},{"source":"../src/Observable.ts","name":null,"original":{"line":235,"column":30},"generated":{"line":1,"column":825}},{"source":"../src/Observable.ts","name":null,"original":{"line":235,"column":37},"generated":{"line":1,"column":832}},{"source":"../src/Observable.ts","name":null,"original":{"line":236,"column":17},"generated":{"line":1,"column":840}},{"source":"../src/Observable.ts","name":null,"original":{"line":236,"column":17},"generated":{"line":1,"column":842}},{"source":"../src/Observable.ts","name":null,"original":{"line":236,"column":22},"generated":{"line":1,"column":847}},{"source":"../src/Observable.ts","name":null,"original":{"line":237,"column":8},"generated":{"line":1,"column":857}},{"source":"../src/Observable.ts","name":null,"original":{"line":237,"column":22},"generated":{"line":1,"column":859}},{"source":"../src/Observable.ts","name":null,"original":{"line":237,"column":22},"generated":{"line":1,"column":861}},{"source":"../src/Observable.ts","name":null,"original":{"line":237,"column":27},"generated":{"line":1,"column":866}},{"source":"../src/Observable.ts","name":null,"original":{"line":241,"column":9},"generated":{"line":1,"column":877}},{"source":"../src/Observable.ts","name":null,"original":{"line":242,"column":6},"generated":{"line":1,"column":879}},{"source":"../src/Observable.ts","name":null,"original":{"line":242,"column":12},"generated":{"line":1,"column":885}},{"source":"../src/Observable.ts","name":null,"original":{"line":242,"column":16},"generated":{"line":1,"column":889}},{"source":"../src/Observable.ts","name":null,"original":{"line":242,"column":22},"generated":{"line":1,"column":895}},{"source":"../src/Observable.ts","name":null,"original":{"line":245,"column":4},"generated":{"line":1,"column":920}},{"source":"../src/Observable.ts","name":null,"original":{"line":245,"column":11},"generated":{"line":1,"column":927}},{"source":"../src/Observable.ts","name":null,"original":{"line":245,"column":15},"generated":{"line":1,"column":931}},{"source":"../src/Observable.ts","name":null,"original":{"line":245,"column":33},"generated":{"line":1,"column":933}},{"source":"../src/Observable.ts","name":null,"original":{"line":245,"column":34},"generated":{"line":1,"column":942}},{"source":"../src/Observable.ts","name":null,"original":{"line":245,"column":43},"generated":{"line":1,"column":944}},{"source":"../src/Observable.ts","name":null,"original":{"line":248,"column":6},"generated":{"line":1,"column":947}},{"source":"../src/Observable.ts","name":null,"original":{"line":248,"column":10},"generated":{"line":1,"column":951}},{"source":"../src/Observable.ts","name":null,"original":{"line":249,"column":6},"generated":{"line":1,"column":953}},{"source":"../src/Observable.ts","name":null,"original":{"line":249,"column":21},"generated":{"line":1,"column":955}},{"source":"../src/Observable.ts","name":null,"original":{"line":249,"column":26},"generated":{"line":1,"column":957}},{"source":"../src/Observable.ts","name":null,"original":{"line":249,"column":36},"generated":{"line":1,"column":967}},{"source":"../src/Observable.ts","name":null,"original":{"line":249,"column":37},"generated":{"line":1,"column":976}},{"source":"../src/Observable.ts","name":null,"original":{"line":250,"column":8},"generated":{"line":1,"column":979}},{"source":"../src/Observable.ts","name":null,"original":{"line":250,"column":12},"generated":{"line":1,"column":982}},{"source":"../src/Observable.ts","name":null,"original":{"line":255,"column":10},"generated":{"line":1,"column":984}},{"source":"../src/Observable.ts","name":null,"original":{"line":256,"column":12},"generated":{"line":1,"column":988}},{"source":"../src/Observable.ts","name":null,"original":{"line":256,"column":17},"generated":{"line":1,"column":990}},{"source":"../src/Observable.ts","name":null,"original":{"line":257,"column":12},"generated":{"line":1,"column":993}},{"source":"../src/Observable.ts","name":null,"original":{"line":257,"column":19},"generated":{"line":1,"column":999}},{"source":"../src/Observable.ts","name":null,"original":{"line":258,"column":12},"generated":{"line":1,"column":1002}},{"source":"../src/Observable.ts","name":null,"original":{"line":258,"column":19},"generated":{"line":1,"column":1004}},{"source":"../src/Observable.ts","name":null,"original":{"line":259,"column":12},"generated":{"line":1,"column":1007}},{"source":"../src/Observable.ts","name":null,"original":{"line":259,"column":25},"generated":{"line":1,"column":1009}},{"source":"../src/Observable.ts","name":null,"original":{"line":268,"column":10},"generated":{"line":1,"column":1028}},{"source":"../src/Observable.ts","name":null,"original":{"line":268,"column":15},"generated":{"line":1,"column":1030}},{"source":"../src/Observable.ts","name":null,"original":{"line":270,"column":9},"generated":{"line":1,"column":1034}},{"source":"../src/Observable.ts","name":null,"original":{"line":270,"column":17},"generated":{"line":1,"column":1036}},{"source":"../src/Observable.ts","name":null,"original":{"line":274,"column":39},"generated":{"line":1,"column":1042}},{"source":"../src/Observable.ts","name":null,"original":{"line":274,"column":39},"generated":{"line":1,"column":1044}},{"source":"../src/Observable.ts","name":null,"original":{"line":274,"column":39},"generated":{"line":1,"column":1054}},{"source":"../src/Observable.ts","name":null,"original":{"line":274,"column":39},"generated":{"line":1,"column":1065}},{"source":"../src/Observable.ts","name":null,"original":{"line":274,"column":50},"generated":{"line":1,"column":1074}},{"source":"../src/Observable.ts","name":null,"original":{"line":275,"column":4},"generated":{"line":1,"column":1077}},{"source":"../src/Observable.ts","name":null,"original":{"line":275,"column":11},"generated":{"line":1,"column":1084}},{"source":"../src/Observable.ts","name":null,"original":{"line":275,"column":16},"generated":{"line":1,"column":1089}},{"source":"../src/Observable.ts","name":null,"original":{"line":275,"column":23},"generated":{"line":1,"column":1096}},{"source":"../src/Observable.ts","name":null,"original":{"line":275,"column":33},"generated":{"line":1,"column":1106}},{"source":"../src/Observable.ts","name":null,"original":{"line":287,"column":2},"generated":{"line":1,"column":1110}},{"source":"../src/Observable.ts","name":null,"original":{"line":287,"column":2},"generated":{"line":1,"column":1112}},{"source":"../src/Observable.ts","name":null,"original":{"line":287,"column":3},"generated":{"line":1,"column":1122}},{"source":"../src/Observable.ts","name":null,"original":{"line":287,"column":3},"generated":{"line":1,"column":1124}},{"source":"../src/Observable.ts","name":null,"original":{"line":287,"column":2},"generated":{"line":1,"column":1136}},{"source":"../src/Observable.ts","name":null,"original":{"line":288,"column":4},"generated":{"line":1,"column":1147}},{"source":"../src/Observable.ts","name":null,"original":{"line":288,"column":11},"generated":{"line":1,"column":1154}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":2},"generated":{"line":1,"column":1160}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":2},"generated":{"line":1,"column":1162}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":2},"generated":{"line":1,"column":1172}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":2},"generated":{"line":1,"column":1177}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1192}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1196}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1198}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1201}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1203}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1205}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1207}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1217}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1224}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1228}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1230}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1232}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1235}},{"source":"../src/Observable.ts","name":null,"original":{"line":323,"column":10},"generated":{"line":1,"column":1245}},{"source":"../src/Observable.ts","name":null,"original":{"line":324,"column":4},"generated":{"line":1,"column":1248}},{"source":"../src/Observable.ts","name":null,"original":{"line":324,"column":30},"generated":{"line":1,"column":1255}},{"source":"../src/Observable.ts","name":null,"original":{"line":324,"column":8},"generated":{"line":1,"column":1259}},{"source":"../src/Observable.ts","name":null,"original":{"line":324,"column":19},"generated":{"line":1,"column":1261}},{"source":"../src/Observable.ts","name":null,"original":{"line":325,"column":13},"generated":{"line":1,"column":1268}},{"source":"../src/Observable.ts","name":null,"original":{"line":328,"column":11},"generated":{"line":1,"column":1273}},{"source":"../src/Observable.ts","name":null,"original":{"line":328,"column":11},"generated":{"line":1,"column":1275}},{"source":"../src/Observable.ts","name":null,"original":{"line":328,"column":25},"generated":{"line":1,"column":1289}},{"source":"../src/Observable.ts","name":null,"original":{"line":328,"column":11},"generated":{"line":1,"column":1291}},{"source":"../src/Observable.ts","name":null,"original":{"line":328,"column":37},"generated":{"line":1,"column":1292}},{"source":"../src/Observable.ts","name":null,"original":{"line":337,"column":2},"generated":{"line":1,"column":1299}},{"source":"../src/Observable.ts","name":null,"original":{"line":337,"column":2},"generated":{"line":1,"column":1301}},{"source":"../src/Observable.ts","name":null,"original":{"line":337,"column":2},"generated":{"line":1,"column":1311}},{"source":"../src/Observable.ts","name":null,"original":{"line":337,"column":2},"generated":{"line":1,"column":1321}},{"source":"../src/Observable.ts","name":null,"original":{"line":337,"column":12},"generated":{"line":1,"column":1330}},{"source":"../src/Observable.ts","name":null,"original":{"line":337,"column":2},"generated":{"line":1,"column":1333}},{"source":"../src/Observable.ts","name":null,"original":{"line":337,"column":2},"generated":{"line":1,"column":1337}},{"source":"../src/Observable.ts","name":null,"original":{"line":337,"column":2},"generated":{"line":1,"column":1339}},{"source":"../src/Observable.ts","name":null,"original":{"line":346,"column":4},"generated":{"line":1,"column":1344}},{"source":"../src/Observable.ts","name":null,"original":{"line":338,"column":9},"generated":{"line":1,"column":1347}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":10},"generated":{"line":1,"column":1351}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":10},"generated":{"line":1,"column":1353}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":15},"generated":{"line":1,"column":1358}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":21},"generated":{"line":1,"column":1362}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":21},"generated":{"line":1,"column":1364}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":26},"generated":{"line":1,"column":1369}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":29},"generated":{"line":1,"column":1372}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":39},"generated":{"line":1,"column":1380}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":39},"generated":{"line":1,"column":1382}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":44},"generated":{"line":1,"column":1387}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":47},"generated":{"line":1,"column":1390}},{"source":"../src/Observable.ts","name":null,"original":{"line":339,"column":54},"generated":{"line":1,"column":1397}},{"source":"../src/Observable.ts","name":null,"original":{"line":340,"column":8},"generated":{"line":1,"column":1405}},{"source":"../src/Observable.ts","name":null,"original":{"line":340,"column":22},"generated":{"line":1,"column":1407}},{"source":"../src/Observable.ts","name":null,"original":{"line":340,"column":22},"generated":{"line":1,"column":1409}},{"source":"../src/Observable.ts","name":null,"original":{"line":340,"column":27},"generated":{"line":1,"column":1414}},{"source":"../src/Observable.ts","name":null,"original":{"line":340,"column":30},"generated":{"line":1,"column":1417}},{"source":"../src/Observable.ts","name":null,"original":{"line":340,"column":37},"generated":{"line":1,"column":1424}},{"source":"../src/Observable.ts","name":null,"original":{"line":341,"column":17},"generated":{"line":1,"column":1432}},{"source":"../src/Observable.ts","name":null,"original":{"line":341,"column":17},"generated":{"line":1,"column":1434}},{"source":"../src/Observable.ts","name":null,"original":{"line":341,"column":22},"generated":{"line":1,"column":1439}},{"source":"../src/Observable.ts","name":null,"original":{"line":342,"column":8},"generated":{"line":1,"column":1449}},{"source":"../src/Observable.ts","name":null,"original":{"line":342,"column":22},"generated":{"line":1,"column":1451}},{"source":"../src/Observable.ts","name":null,"original":{"line":342,"column":22},"generated":{"line":1,"column":1453}},{"source":"../src/Observable.ts","name":null,"original":{"line":342,"column":27},"generated":{"line":1,"column":1458}},{"source":"../src/Observable.ts","name":null,"original":{"line":346,"column":9},"generated":{"line":1,"column":1469}},{"source":"../src/Observable.ts","name":null,"original":{"line":347,"column":6},"generated":{"line":1,"column":1471}},{"source":"../src/Observable.ts","name":null,"original":{"line":347,"column":12},"generated":{"line":1,"column":1477}},{"source":"../src/Observable.ts","name":null,"original":{"line":347,"column":16},"generated":{"line":1,"column":1481}},{"source":"../src/Observable.ts","name":null,"original":{"line":347,"column":22},"generated":{"line":1,"column":1487}},{"source":"../src/Observable.ts","name":null,"original":{"line":350,"column":4},"generated":{"line":1,"column":1512}},{"source":"../src/Observable.ts","name":null,"original":{"line":350,"column":11},"generated":{"line":1,"column":1519}},{"source":"../src/Observable.ts","name":null,"original":{"line":350,"column":15},"generated":{"line":1,"column":1523}},{"source":"../src/Observable.ts","name":null,"original":{"line":350,"column":27},"generated":{"line":1,"column":1525}},{"source":"../src/Observable.ts","name":null,"original":{"line":350,"column":28},"generated":{"line":1,"column":1534}},{"source":"../src/Observable.ts","name":null,"original":{"line":350,"column":37},"generated":{"line":1,"column":1536}},{"source":"../src/Observable.ts","name":null,"original":{"line":351,"column":6},"generated":{"line":1,"column":1539}},{"source":"../src/Observable.ts","name":null,"original":{"line":351,"column":10},"generated":{"line":1,"column":1543}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":6},"generated":{"line":1,"column":1545}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":11},"generated":{"line":1,"column":1547}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":21},"generated":{"line":1,"column":1557}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":22},"generated":{"line":1,"column":1566}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":31},"generated":{"line":1,"column":1569}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":31},"generated":{"line":1,"column":1576}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":39},"generated":{"line":1,"column":1578}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":42},"generated":{"line":1,"column":1581}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":43},"generated":{"line":1,"column":1590}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":56},"generated":{"line":1,"column":1593}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":56},"generated":{"line":1,"column":1600}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":63},"generated":{"line":1,"column":1602}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":69},"generated":{"line":1,"column":1606}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":75},"generated":{"line":1,"column":1617}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":75},"generated":{"line":1,"column":1624}},{"source":"../src/Observable.ts","name":null,"original":{"line":352,"column":83},"generated":{"line":1,"column":1626}},{"source":"../src/Observable.ts","name":null,"original":{"line":58,"column":9},"generated":{"line":1,"column":1634}},{"source":"../src/Observable.ts","name":null,"original":{"line":58,"column":9},"generated":{"line":1,"column":1636}},{"source":"../src/Observable.ts","name":null,"original":{"line":58,"column":28},"generated":{"line":1,"column":1643}},{"source":"../src/Observable.ts","name":null,"original":{"line":58,"column":32},"generated":{"line":1,"column":1652}},{"source":"../src/Observable.ts","name":null,"original":{"line":59,"column":4},"generated":{"line":1,"column":1655}},{"source":"../src/Observable.ts","name":null,"original":{"line":59,"column":11},"generated":{"line":1,"column":1662}},{"source":"../src/Observable.ts","name":null,"original":{"line":59,"column":15},"generated":{"line":1,"column":1666}},{"source":"../src/Observable.ts","name":null,"original":{"line":59,"column":29},"generated":{"line":1,"column":1668}},{"source":"../src/Observable.ts","name":null,"original":{"line":355,"column":0},"generated":{"line":1,"column":1672}},{"source":"../src/Observable.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":1,"column":1674}},{"source":"../src/Observable.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":1,"column":1677}},{"source":"../src/Observable.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":1,"column":1685}},{"source":"../src/Observable.ts","name":null,"original":{"line":28,"column":23},"generated":{"line":1,"column":1696}}],"sources":{"../src/Observable.ts":"import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  /** @deprecated internal use only */ public source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n"},"lineCount":null}},"hash":"54e0e9cdc8cea4b5863b2e2185414b80","cacheData":{"env":{}}}